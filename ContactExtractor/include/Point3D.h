#ifndef __POINT3D_H__
#define __POINT3D_H__
#include <compare>
#include <iostream>


// this is a class for using 3D dimensional calculation

class Point3D
{
public:
	/*varaibles that class can get*/
	double x, y, z;

	/*methods*/
	double length() const;
	double distance(const Point3D& rhs) const;
	double distanceSqr(const Point3D& rhs) const;
	int get_clusterID() const;
	void set_clusterID(int clusterID);
	
	/*operator overloading*/
	Point3D& operator =(const Point3D& src) = default;
	Point3D& operator +=(const Point3D& rhs);
	Point3D& operator -=(const Point3D& rhs);
	Point3D& operator *=(const Point3D& rhs);
	Point3D& operator /=(const Point3D& rhs);
	auto operator <=>(const Point3D& rhs) const; // in c++20, definition of the <=> (three way comparison operator) is enought to have definition of all 6 comparison opertors.
	
	


	/*constructors*/
	//defautl constructor
	// there is no need define new default costructor
	// the one compiler make for us is efficient
	Point3D(); 
	
	//initializer
	// it can be used for initializing x, y, and z coordinates
	// we can initialize them in two different way
	// when we need cubic so just one variable is enough
	Point3D(double d);
	//the other one is when we need rectangular cubic
	Point3D(double x, double y, double z);

	// copy constructor 
	// the one compiler generates is enough
	// but it need to be implicit in case of confusing
	// between assignment and constructor
	Point3D(const Point3D& src) = default;

	// at the end we need the destructor
	// since there is no memory alocation stuff
	// in this class so the destructor generated by compiler in sufficient
	// adding the virtual for deriving other classes from this class
	virtual ~Point3D() = default;
	
private:
	int m_clusterID;
};

/*global functions*/
std::ostream& operator <<(std::ostream& os, const Point3D& p);
Point3D operator +(const Point3D& lhs, const Point3D& rhs);
Point3D operator -(const Point3D& lhs, const Point3D& rhs);
Point3D operator *(const Point3D& lhs, const Point3D& rhs);
Point3D operator /(const Point3D& lhs, const Point3D& rhs);


#endif //__POINT3D_H__
